	/*
	 * public ArrayList<String> biggestAnagram() { ArrayList<String> biggest =
	 * new ArrayList<String>(); ArrayList<String> temp = new
	 * ArrayList<String>(); // go through bySize for (Map.Entry<Integer,
	 * LinkedList<String>> entry : bySize.entrySet()) { Iterator<String>
	 * iterator = entry.getValue().iterator();
	 * 
	 * HashMap<String, String> anagrammed = new HashMap<String, String>(); while
	 * (iterator.hasNext()) { String word1 = iterator.next();
	 * anagrammed.put(word1, word1); temp.add(word1); Iterator<String> iterator2
	 * = entry.getValue().iterator(); while (iterator2.hasNext()) {
	 * 
	 * String word2 = iterator2.next(); if (!anagrammed.containsKey(word2)) { if
	 * (anagramHashMap(word1, word2)) { temp.add(word2); } } } if (temp.size()
	 * >= biggest.size()) { biggest = temp; temp = new ArrayList<String>(); }
	 * temp = new ArrayList<String>(); } }
	 * 
	 * return biggest; }
	 */

	public ArrayList<String> wordsFromTiles(int num) {
		ArrayList<String> tileWords = new ArrayList<String>();
		ArrayList<Character> letters = tiles.getSomeLetters(num);
		String word = "";

		for (Character ch : letters) {
			word += ch;
		}
		int size = word.length();
		for (int i = 0; i < size; i++) {
			int currentSize = size;
			for (int j = 0; j < currentSize; j++) {
				String letterBefore = word.substring(0, j);
				// gets you whatever comes before letter skipping this round
				String lettersAfter = word.substring(j);
				// gets the rest
				recursion(letterBefore + lettersAfter, "");
			}
			
			word = word.substring(0, --currentSize);
		}

		System.out.println(possibleWords);

		for (String pw : possibleWords) {
			if (contains(pw))
				tileWords.add(pw);
		}
		return tileWords;
	}

	public void recursion(String word, String toAdd) {

		if (word.length() == 1) {
			possibleWords.add(toAdd + word);

		} else {

			for (int i = 0; i < word.length(); i++) {
				String letterNow = word.substring(i, i + 1);
				// gets you the current letter
				String letterBefore = word.substring(0, i);
				// gets you whatever comes before
				String lettersAfter = word.substring(i + 1);
				// gets the rest
				recursion(letterBefore + lettersAfter, toAdd + letterNow);
			}

		}

	}